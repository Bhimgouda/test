{
  "title": "Value Types",
  "level": "Amateur",
  "logic": {
    "moduleName": "ValueTypes",
    "deployerEndpoint": "Initialize!",
    "deployerArgs": []
  },
  "points": "20",
  "description": "<p>Here are some Primitive data types available in cocolang.</p><ol><li>Bool</li><li>String</li><li>Bytes</li><li>Address</li><li>U64 and U256</li><li>I64 and I256</li></ol><p>All the coco variables when declared with a particular type are initialized with zero/default values</p><p>When they are used as function arguments or variable assignments, their values are copied over to the new variable.</p>",
  "startCode": "coco ValueTypes\n\nstate persistent:\n    justABytes Bytes \n    justAnAddress Address\n\nendpoint deployer Initialize!():\n    mutate 0x -> ValueTypes.State.justABytes\n    mutate Address(Sender) -> ValueTypes.State.justAnAddress",
  "solutionCode": "coco ValueTypes\n\nstate persistent:\n    justABytes Bytes \n    justAnAddress Address\n    justABoolean Bool\n    justAString String\n    bit64Integer I64\n    bit256Integer I256\n    bit64UnsignedInteger U64\n    bit256UnsignedInteger U256\n\nendpoint deployer Initialize!():\n    mutate 0x -> ValueTypes.State.justABytes\n    mutate Address(Sender) -> ValueTypes.State.justAnAddress\n    mutate true -> ValueTypes.State.justABoolean\n    mutate \"I am a string\" -> ValueTypes.State.justAString\n    mutate -20 -> ValueTypes.State.bit64Integer\n    mutate 50 -> ValueTypes.State.bit256Integer\n    mutate 20 -> ValueTypes.State.bit64UnsignedInteger\n    mutate 50 -> ValueTypes.State.bit256UnsignedInteger",
  "tasks": [
    {
      "description": "Create a persistent state variable of datatype Bool called justABoolean and initialize it to true",
      "test": "async (logicDriver, expect) => { const justABoolean = await logicDriver.persistentState.get('justABoolean'); expect(justABoolean).to.be.equal(true); }"
    },
    {
      "description": "Create a persistent state variable of datatype String called justAString and initialize it to \"I am a string\"",
      "test": "async (logicDriver, expect) => { const justAString = await logicDriver.persistentState.get('justAString'); expect(justAString).to.be.equal('I am a string'); }"
    },
    {
      "description": "Create a persistent state variable of datatype I64 called bit64Integer and initialize it to -20",
      "test": "async (logicDriver, expect) => { const bit64Integer = await logicDriver.persistentState.get('bit64Integer'); expect(bit64Integer).to.be.equal(-20); }"
    },
    {
      "description": "Create a persistent state variable of datatype I256 called bit256Integer and initialize it to 50",
      "test": "async (logicDriver, expect) => { const bit256Integer = await logicDriver.persistentState.get('bit256Integer'); expect(bit256Integer).to.be.equal(50); }"
    },
    {
      "description": "Create a persistent state variable of datatype U64 called bit64UnsignedInteger and initialize it to 20",
      "test": "async (logicDriver, expect) => { const bit64UnsignedInteger = await logicDriver.persistentState.get('bit64UnsignedInteger'); expect(bit64UnsignedInteger).to.be.equal(20); }"
    },
    {
      "description": "Create a persistent state variable of datatype U256 called bit256UnsignedInteger and initialize it to 50",
      "test": "async (logicDriver, expect) => { const bit256UnsignedInteger = await logicDriver.persistentState.get('bit256UnsignedInteger'); expect(bit256UnsignedInteger).to.be.equal(50); }"
    }
  ]
}
